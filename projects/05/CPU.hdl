// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A Register
    // - Input Selector (Address -> store instruction in A, Compute -> might want result in A)
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=ARegInput);
    // - Load assert logic (A will be written only if this is an Address instruction, or if it's marked as a destination in a Compute instruction)
    Not(in=instruction[15], out=isAddrInstruction);
    Or(a=isAddrInstruction, b=instruction[5], out=ARegLoad);
    // - The register
    ARegister(in=ARegInput, load=ARegLoad, out=ARegOut, out[0..14]=addressM);

    // D Register
    // - Load assert logic (D will be written only if this is a Compute instruction with D marked as a destination)
    And(a=instruction[15], b=instruction[4], out=DRegLoad);
    // - The register
    DRegister(in=ALUout, load=DRegLoad, out=DRegOut);

    // ALU
    // - A or M[A] selector
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUInputA);
    // - The ALU
    ALU(x=DRegOut, y=ALUInputA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=ALUzero, ng=ALUneg);

    // Program Counter
    // - Jump detection (only set PC to value of A register if we are actually jumping)
    // -- Perform each conditional check, then pick which one we want based on J2+3
    Not(in=ALUneg, out=ALUnotNeg);
    Not(in=ALUzero, out=ALUnonzero);
    Or(a=ALUneg, b=ALUzero, out=ALUnotPositive);
    And(a=ALUnonzero, b=ALUnotNeg, out=ALUpositive);
    Mux8Way16(a=false, b[0]=ALUpositive, c[0]=ALUzero, d[0]=ALUnotNeg, e[0]=ALUneg, f[0]=ALUnonzero, g[0]=ALUnotPositive, h[0]=true, sel=instruction[0..2], out[0]=jumpCndSatisfied);
    // -- Make sure this is a Compute instruction
    And(a=instruction[15], b=jumpCndSatisfied, out=doJump);
    Not(in=doJump, out=dontJump);

    // - The counter
    PC(in=ARegOut, load=doJump, inc=dontJump, reset=reset, out[0..14]=pc);
    
    // assert writeM only when the M dest bit is set in a Compute instruction
    And(a=instruction[15], b=instruction[3], out=writeM);

}